/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.comparison_two_faces;

import cz.fidentis.comparison.ComparisonMethod;
import cz.fidentis.comparison.ICPmetric;
import cz.fidentis.comparison.RegistrationMethod;
import cz.fidentis.comparison.hausdorffDistance.ComparisonMetrics;
import cz.fidentis.visualisation.surfaceComparison.HDpainting;
import cz.fidentis.comparison.hausdorffDistance.HausdorffDistance;
import cz.fidentis.comparison.hausdorffDistance.NearestCurvature;
import cz.fidentis.comparison.icp.KdTree;
import cz.fidentis.comparison.icp.KdTreeFaces;
import cz.fidentis.comparison.icp.KdTreeIndexed;
import cz.fidentis.comparison.procrustes.Procrustes2Models;
import cz.fidentis.controller.Comparison2Faces;
import cz.fidentis.featurepoints.FacialPoint;
import cz.fidentis.featurepoints.FeaturePointsUniverse;
import cz.fidentis.featurepoints.curvature.CurvatureType;
import cz.fidentis.featurepoints.curvature.Curvature_jv;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.model.Model;
import cz.fidentis.model.ModelLoader;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.processing.exportProcessing.ResultExports;
import cz.fidentis.renderer.ComparisonGLEventListener;
import cz.fidentis.utils.SortUtils;
import cz.fidentis.visualisation.procrustes.PApainting;
import cz.fidentis.visualisation.procrustes.PApaintingInfo;
import cz.fidentis.visualisation.surfaceComparison.HDpaintingInfo;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.color.ColorSpace;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.vecmath.Vector3f;
import jv.object.PsDebug;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.Exceptions;

/**
 *
 * @author Katka
 */
@SuppressWarnings("rawtypes")
public class PairComparisonConfiguration extends javax.swing.JPanel {

    JPanel activeColorPanel;

    /**
     * Creates new form ComparisonConfiguration
     */
    public PairComparisonConfiguration() {
        initComponents();
        activeColorPanel = new JPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        chooser = new javax.swing.JFileChooser();
        buttonGroup2 = new javax.swing.ButtonGroup();
        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        processComparisonButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        deafultDatabaseRadioButton = new javax.swing.JRadioButton();
        chooseDatabaseRadioButton = new javax.swing.JRadioButton();
        createDatabaseRadioButton = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSlider3 = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton10 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        visualizationPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        primaryColorPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        secondaryColorPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jSlider4 = new javax.swing.JSlider();
        jCheckBox3 = new javax.swing.JCheckBox();
        noneRadioButton = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        fogColorPanel = new javax.swing.JPanel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();

        Dimension dimension = new Dimension();
        dimension.setSize(jColorChooser1.getPreferredSize().width + 5, jColorChooser1.getPreferredSize().height+80);
        colorDialog.setMinimumSize(dimension);
        colorDialog.setModal(true);
        colorDialog.setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(6, 6, 6))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(processComparisonButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.processComparisonButton.text")); // NOI18N
        processComparisonButton.setMinimumSize(new java.awt.Dimension(279, 28));
        processComparisonButton.setPreferredSize(new java.awt.Dimension(279, 28));
        processComparisonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processComparisonButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel3.text")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hausdorff Distance", "Procrustes Analysis" }));
        jComboBox1.setMinimumSize(new java.awt.Dimension(191, 25));
        jComboBox1.setPreferredSize(new java.awt.Dimension(191, 25));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jPanel1.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox2, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jCheckBox2.text")); // NOI18N
        jCheckBox2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox2StateChanged(evt);
            }
        });

        deafultDatabaseRadioButton.setVisible(false);
        buttonGroup2.add(deafultDatabaseRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(deafultDatabaseRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.deafultDatabaseRadioButton.text")); // NOI18N
        deafultDatabaseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deafultDatabaseRadioButtonActionPerformed(evt);
            }
        });

        chooseDatabaseRadioButton.setVisible(false);
        buttonGroup2.add(chooseDatabaseRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(chooseDatabaseRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.chooseDatabaseRadioButton.text")); // NOI18N
        chooseDatabaseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDatabaseRadioButtonActionPerformed(evt);
            }
        });

        createDatabaseRadioButton.setVisible(false);
        buttonGroup2.add(createDatabaseRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(createDatabaseRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.createDatabaseRadioButton.text")); // NOI18N
        createDatabaseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDatabaseRadioButtonActionPerformed(evt);
            }
        });

        jTextField1.setVisible(false);
        jTextField1.setText(org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jTextField1.text")); // NOI18N

        jButton1.setVisible(false);
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSlider3.setMajorTickSpacing(20);
        jSlider3.setMinorTickSpacing(5);
        jSlider3.setPaintLabels(true);
        jSlider3.setPaintTicks(true);
        jSlider3.setValue(30);
        jSlider3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider3StateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel12.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSlider3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jCheckBox1))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(createDatabaseRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chooseDatabaseRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deafultDatabaseRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addGap(1, 1, 1)
                .addComponent(deafultDatabaseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseDatabaseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createDatabaseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        Hashtable tresholdTable = new Hashtable();
        tresholdTable.put(new Integer(0), new JLabel("0"));
        tresholdTable.put(new Integer(20), new JLabel("0,2"));
        tresholdTable.put(new Integer(40), new JLabel("0,4"));
        tresholdTable.put(new Integer(60), new JLabel("0,6"));
        tresholdTable.put(new Integer(80), new JLabel("0,8"));
        tresholdTable.put(new Integer(100), new JLabel("1"));
        jSlider3.setLabelTable(tresholdTable);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton10, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jButton10.text")); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel9.text")); // NOI18N

        primaryColorPanel.setBackground(new java.awt.Color(51, 153, 255));
        primaryColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        primaryColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                primaryColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout primaryColorPanelLayout = new javax.swing.GroupLayout(primaryColorPanel);
        primaryColorPanel.setLayout(primaryColorPanelLayout);
        primaryColorPanelLayout.setHorizontalGroup(
            primaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        primaryColorPanelLayout.setVerticalGroup(
            primaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel13.text")); // NOI18N

        secondaryColorPanel.setBackground(new java.awt.Color(255, 255, 0));
        secondaryColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        secondaryColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                secondaryColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout secondaryColorPanelLayout = new javax.swing.GroupLayout(secondaryColorPanel);
        secondaryColorPanel.setLayout(secondaryColorPanelLayout);
        secondaryColorPanelLayout.setHorizontalGroup(
            secondaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        secondaryColorPanelLayout.setVerticalGroup(
            secondaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel14.text")); // NOI18N

        jSlider4.setMajorTickSpacing(20);
        jSlider4.setMinorTickSpacing(5);
        jSlider4.setPaintLabels(true);
        jSlider4.setPaintTicks(true);
        jSlider4.setValue(100);
        jSlider4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider4StateChanged(evt);
            }
        });

        jCheckBox3.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox3, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jCheckBox3.text")); // NOI18N
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(noneRadioButton);
        noneRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(noneRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.noneRadioButton.text")); // NOI18N
        noneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton2, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jRadioButton2.text")); // NOI18N
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton3, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jRadioButton3.text")); // NOI18N
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton4, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jRadioButton4.text")); // NOI18N
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel15.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox4, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jCheckBox4.text")); // NOI18N
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel16.text")); // NOI18N

        fogColorPanel.setBackground(new java.awt.Color(255, 102, 204));
        fogColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fogColorPanel.setPreferredSize(new java.awt.Dimension(2, 14));
        fogColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fogColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fogColorPanelLayout = new javax.swing.GroupLayout(fogColorPanel);
        fogColorPanel.setLayout(fogColorPanelLayout);
        fogColorPanelLayout.setHorizontalGroup(
            fogColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );
        fogColorPanelLayout.setVerticalGroup(
            fogColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jCheckBox7.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox7, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jCheckBox7.text")); // NOI18N
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox5, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jCheckBox5.text")); // NOI18N
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox6, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jCheckBox6.text")); // NOI18N
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout visualizationPanelLayout = new javax.swing.GroupLayout(visualizationPanel);
        visualizationPanel.setLayout(visualizationPanelLayout);
        visualizationPanelLayout.setHorizontalGroup(
            visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visualizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(visualizationPanelLayout.createSequentialGroup()
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel9)
                            .addComponent(jLabel14)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(visualizationPanelLayout.createSequentialGroup()
                                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(secondaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fogColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(primaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox5)
                                    .addComponent(jCheckBox6))
                                .addContainerGap())))
                    .addGroup(visualizationPanelLayout.createSequentialGroup()
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox7)
                            .addComponent(jCheckBox4)
                            .addComponent(jCheckBox3)
                            .addGroup(visualizationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton4)
                                    .addComponent(jRadioButton3)
                                    .addComponent(jRadioButton2)
                                    .addComponent(noneRadioButton))))
                        .addContainerGap(72, Short.MAX_VALUE))))
        );
        visualizationPanelLayout.setVerticalGroup(
            visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visualizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(secondaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox6, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(visualizationPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(visualizationPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(primaryColorPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fogColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7)
                .addGap(7, 7, 7)
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noneRadioButton)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton4))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processComparisonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(66, 66, 66)
                                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel3))
                            .addGap(18, 18, 18)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(visualizationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processComparisonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visualizationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider3StateChanged
        GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setFpTreshold(jSlider3.getValue());
    }//GEN-LAST:event_jSlider3StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (chooseDatabaseRadioButton.isSelected()) {

            FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT files", "txt");
            chooser.setFileFilter(filter);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setMultiSelectionEnabled(false);

            int returnVal = chooser.showOpenDialog(GUIController.getSelectedProjectTopComponent());
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                jTextField1.setText(chooser.getSelectedFile().getPath());

            }
        } else if (this.createDatabaseRadioButton.isSelected()) {
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "OBJ files", "obj");
            chooser.setFileFilter(filter);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setMultiSelectionEnabled(true);

            int returnVal = chooser.showOpenDialog(GUIController.getSelectedProjectTopComponent());

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String names = "";
                for (int i = 0; i < chooser.getSelectedFiles().length; i++) {
                    names += chooser.getSelectedFiles()[i].getName() + ";";
                }
                jTextField1.setText(names);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void createDatabaseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDatabaseRadioButtonActionPerformed
        jTextField1.setVisible(true);
        jButton1.setVisible(true);
    }//GEN-LAST:event_createDatabaseRadioButtonActionPerformed

    private void chooseDatabaseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDatabaseRadioButtonActionPerformed
        jTextField1.setVisible(true);
        jButton1.setVisible(true);
    }//GEN-LAST:event_chooseDatabaseRadioButtonActionPerformed

    private void deafultDatabaseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deafultDatabaseRadioButtonActionPerformed
        jTextField1.setVisible(false);
        jButton1.setVisible(false);
    }//GEN-LAST:event_deafultDatabaseRadioButtonActionPerformed

    private void jCheckBox2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox2StateChanged
        GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setFpScaling(jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2StateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            deafultDatabaseRadioButton.setVisible(true);
            chooseDatabaseRadioButton.setVisible(true);
            createDatabaseRadioButton.setVisible(true);
            if (chooseDatabaseRadioButton.isSelected() || createDatabaseRadioButton.isSelected()) {
                jTextField1.setVisible(true);
                jButton1.setVisible(true);
                if (chooseDatabaseRadioButton.isSelected()) {
                    GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setUseDatabase(2);
                } else {
                    GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setUseDatabase(3);
                }
            }
            if (!chooseDatabaseRadioButton.isSelected() && !createDatabaseRadioButton.isSelected()) {
                deafultDatabaseRadioButton.setSelected(true);
                GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setUseDatabase(1);
            }
        } else {
            deafultDatabaseRadioButton.setVisible(false);
            chooseDatabaseRadioButton.setVisible(false);
            createDatabaseRadioButton.setVisible(false);
            jTextField1.setVisible(false);
            jButton1.setVisible(false);
            GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setUseDatabase(0);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (((ComparisonMethod) jComboBox1.getSelectedItem()) == ComparisonMethod.PROCRUSTES) {
            jPanel1.setVisible(true);
            //  visualisationPanel.setVisible(false);

        }
        if (((ComparisonMethod) jComboBox1.getSelectedItem()) == ComparisonMethod.HAUSDORFF_DIST) {
            jPanel1.setVisible(false);
            //  visualisationPanel.setVisible(true);

        }
        GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setComparisonMethod((ComparisonMethod) jComboBox1.getSelectedItem());
    }//GEN-LAST:event_jComboBox1ActionPerformed

    public void computeComparison(final ProjectTopComponent tc) {
        Model main = tc.getViewerPanel_2Faces().getListener1().getModel(); //hlavny model v lavom panele
        Model compare = tc.getViewerPanel_2Faces().getListener2().getModel(); //vedlajsi model v pravom panele

        if (main == null || compare == null) {
            System.out.print("Some models were not loaded.");
            return;
        }

        if (tc.getProject().getSelectedComparison2Faces().getRegistrationMethod() == RegistrationMethod.NO_REGISTRATION) {//no reistration
            ModelLoader loader = new ModelLoader();
            main = loader.loadModel(tc.getProject().getSelectedComparison2Faces().getModel1().getFile(), false, false);
            compare = loader.loadModel(tc.getProject().getSelectedComparison2Faces().getModel2().getFile(), false, false);
        }
        final Model mainFace = compare;
        final Model compareFace = main;

        Runnable run = new Runnable() {
            @Override
            public void run() {
                ProgressHandle p;

                p = ProgressHandleFactory.createHandle("Computing comparison...");

                try {

                    p.start(100);

                    processComparisonButton.setEnabled(false);
                    tc.getProject().getSelectedComparison2Faces().setCompareButtonEnabled(false);
                    //Computing Hausdorff Distance
                    if (((ComparisonMethod) jComboBox1.getSelectedItem()) == ComparisonMethod.HAUSDORFF_DIST
                            || ((ComparisonMethod) jComboBox1.getSelectedItem()) == ComparisonMethod.HAUSDORFF_CURV) {
                        List<Float> hdDistance = null;

                        if (((ComparisonMethod) jComboBox1.getSelectedItem()) == ComparisonMethod.HAUSDORFF_DIST) {
                            //KdTree mainF = GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().getMainFace();
                            //List<Vector3f> usedNormals = compareFace.getNormals();
                            KdTree mainF;
                            
                            if(tc.getProject().getSelectedComparison2Faces().getIcpMetric() == ICPmetric.VERTEX_TO_MESH){
                                mainF = new KdTreeFaces(tc.getProject().getSelectedComparison2Faces().getModel2().getVerts(),
                                        tc.getProject().getSelectedComparison2Faces().getModel2().getFaces());
                            }else{
                                mainF = new KdTreeIndexed(tc.getProject().getSelectedComparison2Faces().getModel2().getVerts());
                            }
                            
                            List<Vector3f> usedNormals = compareFace.getNormals();
                            

                            if (compareFace.getVerts().size() > compareFace.getNormals().size()) {
                                usedNormals = SurfaceComparisonProcessing.instance().recomputeVertexNormals(compareFace);
                                compareFace.setNormals((ArrayList<Vector3f>) usedNormals);
                            }

                            /*if (mainF == null) {
                                mainF = new KdTreeIndexed(mainFace.getVerts());
                            }*/

                            p.setDisplayName("Computing Hausdorff Distance...");
                            p.progress(90);
                            hdDistance = HausdorffDistance.instance().hDistance(mainF, compareFace.getVerts(), usedNormals, true);
                        } else {
                            //in case vertex-to-plane metric was used created new kd-tree to be able to get index of nearest neighbor
                            KdTreeIndexed mainF = new KdTreeIndexed(GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().getModel1().getVerts());
                            double[] mainCurvature = new Curvature_jv(GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().getModel1()).getCurvature(CurvatureType.Gaussian);
                            double[] secondaryCurvature = new Curvature_jv(GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().getModel2()).getCurvature(CurvatureType.Gaussian);

                            p.setDisplayName("Computing Nearest Neighbor curvature...");
                            p.progress(90);
                            hdDistance = NearestCurvature.instance().nearestCurvature(mainF, compareFace.getVerts(), mainCurvature, secondaryCurvature);
                            //hdDistance = ComparisonMetrics.instance().thresholdValuesKeepSort(hdDistance, 0.99f, false);
                        }

                        tc.getViewerPanel_2Faces().getListener1().setProcrustes(false);

                        tc.getProject().getSelectedComparison2Faces().setHd(hdDistance);
                        List<Float> sortedValuesRel = SortUtils.instance().sortValues(hdDistance);
                        List<Float> absValues = new LinkedList<>();

                        for (Float f : hdDistance) {
                            absValues.add(Math.abs(f));
                        }

                        List<Float> sortedValuesAbs = SortUtils.instance().sortValues(absValues);

                        tc.getProject().getSelectedComparison2Faces().setSortedHdValuesAbs(sortedValuesAbs);
                        tc.getProject().getSelectedComparison2Faces().setSortedHdValuesRelative(sortedValuesRel);

                        HDpaintingInfo info = new HDpaintingInfo(hdDistance, tc.getProject().getSelectedComparison2Faces().getModel1(), true);
                        float[] minColor = {0.298f, 0.0f, 0.898f};
                        Color minCol = new Color(76, 0, 229);
                        float[] maxColor = {0.898f, 0.1f, 0.133f};
                        Color maxCol = new Color(229, 0, 34);
                        info.setMinColor(minColor);
                        info.setMaxColor(maxColor);

                        HDpainting paintMain = new HDpainting(info);

                        GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setHdColor1(minCol);
                        GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setHdColor2(maxCol);

                        tc.getViewerPanel_2Faces().getListener1().drawHD(true);
                        tc.getViewerPanel_2Faces().getListener1().setHdPaint(paintMain);
                        tc.getViewerPanel_2Faces().getListener1().setHdInfo(info);
                        tc.getProject().getSelectedComparison2Faces().setHDP(paintMain);
                        tc.getProject().getSelectedComparison2Faces().setHdPaintingInfo(info);

                        tc.getProject().getSelectedComparison2Faces().setNumericalResults(setValues(hdDistance));
                        tc.getProject().getSelectedComparison2Faces().setLowerHDTreshold(0.0f);
                        tc.getProject().getSelectedComparison2Faces().setUpperHDTreshold(1f);

                        tc.getViewerPanel_2Faces().setResultButtonVisible(true, 0);
                    } else {
                        //starting Procrustes analysis

                        //Procrustes Analysis with database
                        if (createDatabaseRadioButton.isSelected()) {
                            //creating database
                            p.setDisplayName("Processing database...");
                            File[] files = chooser.getSelectedFiles();
                            ModelLoader loader = new ModelLoader();
                            Model model;
                            List<FacialPoint> facialPoints;
                            FeaturePointsUniverse fpUniverse;
                            for (File file : files) {
                                model = loader.loadModel(file, false, true);

                                fpUniverse = new FeaturePointsUniverse(model);
                                facialPoints = new ArrayList<FacialPoint>();

                                PsDebug.setDebug(false);
                                PsDebug.setError(false);
                                PsDebug.setWarning(false);
                                PsDebug.setMessage(false);
                                fpUniverse.findNose();
                                facialPoints = fpUniverse.getFacialPoints();
                                fpUniverse.findMouth();
                                facialPoints = fpUniverse.getFacialPoints();
                                fpUniverse.findEyes();
                                facialPoints = fpUniverse.getFacialPoints();
                                PsDebug.getConsole().setVisible(false);

                                tc.getProject().getSelectedComparison2Faces().addFacialPoints(facialPoints);
                            }

                        }

                        p.setDisplayName("Computing coparison...");

                        PApaintingInfo paInfo = new PApaintingInfo(null, null, 0);

                        if (jCheckBox2.isSelected()) {
                            tc.getViewerPanel_2Faces().getListener1().setCameraPosition(0, 0, 700);
                            paInfo.setPointSize(30 * 3);
                            //paInfo.setPointSize(30 / (float) (30));
                            //tc.getViewerPanel_2Faces().getListener2().setFpSize(30 / (float) (30));
                        } else {
                            tc.getViewerPanel_2Faces().getListener1().setCameraPosition(0, 0, 700);
                            paInfo.setPointSize(30 * 3);
                            //tc.getViewerPanel_2Faces().getListener2().setFpSize(30 * 3);
                        }

                        tc.getViewerPanel_2Faces().getListener1().setProcrustes(true);
                        //tc.getViewerPanel_2Faces().getListener2().setTypePA(0);

                        //choosing type of used database
                        if (jCheckBox1.isSelected()) {
                            Procrustes2Models procrustes = null;
                            try {
                                if (deafultDatabaseRadioButton.isSelected()) {
                                    procrustes = new Procrustes2Models(tc.getViewerPanel_2Faces().getListener1().getFpUniverse().getFacialPoints(),
                                            tc.getViewerPanel_2Faces().getListener2().getFpUniverse().getFacialPoints(), jCheckBox2.isSelected());

                                } else if (chooseDatabaseRadioButton.isSelected()) {
                                    if (!jTextField1.getText().endsWith(".txt")) {
                                        throw new IllegalArgumentException("Cannot be used as database.");
                                    } else {
                                        procrustes = new Procrustes2Models(tc.getViewerPanel_2Faces().getListener1().getFpUniverse().getFacialPoints(),
                                                tc.getViewerPanel_2Faces().getListener2().getFpUniverse().getFacialPoints(), jTextField1.getText(), jCheckBox2.isSelected());
                                    }
                                } else {
                                    List<List<FacialPoint>> list = tc.getProject().getSelectedComparison2Faces().getDatabasePoints();
                                    procrustes = new Procrustes2Models(tc.getViewerPanel_2Faces().getListener1().getFpUniverse().getFacialPoints(),
                                            tc.getViewerPanel_2Faces().getListener2().getFpUniverse().getFacialPoints(), list, jCheckBox2.isSelected());
                                }

                                //                            Procrustes2Models procrustes = new Procrustes2Models(tc.getViewerPanel_2Faces().getListener1().getFpUniverse().getFacialPoints(),
                                //                                    tc.getViewerPanel_2Faces().getListener2().getFpUniverse().getFacialPoints(), jCheckBox2.isSelected());
                                String result = procrustes.compare2ModelsWithDatabase(jSlider3.getValue() / 100f);
                                // GUIController.getConfigurationTopComponent().getPairComparisonResults().setNumericalResult(result);
                                tc.getProject().getSelectedComparison2Faces().setNumericalResults(result);

                                //tc.getViewerPanel_2Faces().getListener2().setGpa(procrustes.getGpa());
                                paInfo.setGpa(procrustes.getGpa());
                                //tc.getViewerPanel_2Faces().getListener2().setEnhance(0);

                            } catch (FileNotFoundException ex) {
                                Exceptions.printStackTrace(ex);
                                p.finish();
                                processComparisonButton.setEnabled(true);
                                tc.getProject().getSelectedComparison2Faces().setCompareButtonEnabled(true);
                            }

                        } else {
                            //Procrustes analysis without using database
                            try {
                                Procrustes2Models procrustes = new Procrustes2Models(tc.getViewerPanel_2Faces().getListener1().getFpUniverse().getFacialPoints(),
                                        tc.getViewerPanel_2Faces().getListener2().getFpUniverse().getFacialPoints(), jCheckBox2.isSelected());

                                String result = procrustes.compare2Models(jSlider3.getValue() / 100f);
                                // GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getCanvas2().setDescriptionText(result);
                                // GUIController.getConfigurationTopComponent().getPairComparisonResults().setNumericalResult(result);
                                tc.getProject().getSelectedComparison2Faces().setNumericalResults(result);

                                /*tc.getViewerPanel_2Faces().getListener2().setGpa(procrustes.getGpa());
                             tc.getViewerPanel_2Faces().getListener2().setEnhance(0);*/
                                paInfo.setPa(procrustes.getPa());
                                paInfo.setPa2(procrustes.getPa2());
                                paInfo.setGpa(procrustes.getGpa());

                            } catch (FileNotFoundException ex) {
                                Exceptions.printStackTrace(ex);
                                p.finish();
                                processComparisonButton.setEnabled(true);
                                tc.getProject().getSelectedComparison2Faces().setCompareButtonEnabled(true);
                            }
                        }

                        tc.getViewerPanel_2Faces().getListener1().setPaInfo(paInfo);
                        tc.getViewerPanel_2Faces().getListener1().setPaPainting(new PApainting(paInfo));

                    }
                    processComparisonButton.setEnabled(true);
                    tc.getProject().getSelectedComparison2Faces().setCompareButtonEnabled(true);
                    tc.getProject().getSelectedComparison2Faces().setState(3);

                    /*if (((ComparisonMethod) jComboBox1.getSelectedItem()) == ComparisonMethod.PROCRUSTES) {
                    tc.getProject().getSelectedComparison2Faces().setResults(0);
                } else if(((ComparisonMethod) jComboBox1.getSelectedItem()) == ComparisonMethod.HAUSDORFF_DIST){
                    tc.getProject().getSelectedComparison2Faces().setResults(1);
                }else{
                    tc.getProject().getSelectedComparison2Faces().setResults(2);
                }*/
                    //tc.getProject().getSelectedComparison2Faces().setResults((ComparisonMethod) jComboBox1.getSelectedItem());
                    tc.getViewerPanel_2Faces().setResultButtonVisible(false, 0);

                    if (GUIController.getSelectedProjectTopComponent() == tc) {
                        GUIController.getConfigurationTopComponent().addPairComparisonResults();
                    }

                    p.finish();
                } catch (Exception ex) {
                   Exceptions.printStackTrace(ex);
                   processComparisonButton.setEnabled(true);
                }finally{
                     p.finish();
                }
            }
        };
        Thread t = new Thread(run);
        t.start(); // start the task and progress visualisation

        /*Color color = new Color(colorPanel1.getBackground().getRGB());

         int[] rgbVal = new int[3];
         rgbVal[0] = color.getRed();
         rgbVal[1] = color.getGreen();
         rgbVal[2] = color.getBlue();

         paintMain.setMinColor2(rgbVal);

         color = new Color(colorPanel2.getBackground().getRGB());

         rgbVal[0] = color.getRed();
         rgbVal[1] = color.getGreen();
         rgbVal[2] = color.getBlue();
         paintMain.setMaxColor2(rgbVal);*/
    }

    private void processComparisonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processComparisonButtonActionPerformed
        computeComparison(GUIController.getSelectedProjectTopComponent());

    }//GEN-LAST:event_processComparisonButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setResultButtonVisible(false, 0);
        //if (GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().getNumberOfModels() > 1) {
            ModelLoader ml = new ModelLoader();
            Model model = ml.loadModel(GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().getModel().getFile(), false, true);

            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setModels(model);
            
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setFacialPoints(null);
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFacialPoints(null);
            
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setProcrustes(false);
            
            
            model = ml.loadModel(GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().getModel().getFile(), false, true);
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setModels(model);
        //}
        GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().setState(1);
        GUIController.getConfigurationTopComponent().addRegistrationComponent();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        ResultExports.instance().exportModels(tc,
                tc.getProject().getSelectedComparison2Faces().getModel1(),
                tc.getProject().getSelectedComparison2Faces().getModel2());
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        colorDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        colorDialog.setVisible(false);
        activeColorPanel.setBackground(jColorChooser1.getColor());
        setColors();


    }//GEN-LAST:event_jButton5ActionPerformed

    private void primaryColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_primaryColorPanelMouseClicked
        activeColorPanel = primaryColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_primaryColorPanelMouseClicked

    private void secondaryColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondaryColorPanelMouseClicked
        activeColorPanel = secondaryColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_secondaryColorPanelMouseClicked

    private void jSlider4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider4StateChanged
        setColors();
    }//GEN-LAST:event_jSlider4StateChanged

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setInnerSurfaceVisible(jCheckBox3.isSelected());
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void noneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneRadioButtonActionPerformed
        if (noneRadioButton.isSelected()) {
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(0);
        }
    }//GEN-LAST:event_noneRadioButtonActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        if (jRadioButton2.isSelected()) {
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(1);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        if (jRadioButton3.isSelected()) {
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(2);
        }
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        if (jRadioButton4.isSelected()) {
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(3);
        }
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setUseGlyphs(jCheckBox4.isSelected());
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void fogColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fogColorPanelMouseClicked
        activeColorPanel = fogColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_fogColorPanelMouseClicked

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setContours(jCheckBox7.isSelected());
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        setColors();
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        setColors();
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    public boolean getScaleEnabled() {
        return jCheckBox2.isSelected();
    }

    public void setProcessComparisonEnabled(boolean en) {
        processComparisonButton.setEnabled(en);
    }

    private String setValues(List<Float> hdDistance) {
        return ("Min;" + ComparisonMetrics.instance().findMinDistance(hdDistance, true) + "\n"
                + "Max;" + ComparisonMetrics.instance().findMaxDistance(hdDistance, true) + "\n"
                + "RMS;" + ComparisonMetrics.instance().rootMeanSqr(hdDistance, true) + "\n"
                + "Arithmetic Mean;" + ComparisonMetrics.instance().aritmeticMean(hdDistance, true) + "\n"
                + "Geomertic Mean;" + ComparisonMetrics.instance().geometricMean(hdDistance, true)) + "\n"
                + "75 Percentile;" + ComparisonMetrics.instance().percentileSeventyFive(hdDistance, true);
    }

    private void setupComparisonMethods(Comparison2Faces c) {
        jComboBox1.removeAllItems();
        for (int i = 0; i < ComparisonMethod.values().length; i++) {
            jComboBox1.addItem(ComparisonMethod.values()[i]);
            if (c.getComparisonMethod() == ComparisonMethod.values()[i]) {
                jComboBox1.setSelectedIndex(i);
            }
        }
        /*    if((c.getRegistrationMethod() == 0)){
         jComboBox1.removeItemAt(0);
         }*/
        if ((c.getRegistrationMethod() != RegistrationMethod.PROCRUSTES)) {
            jComboBox1.removeItemAt(1);
        }

    }

    public void setConfiguration() {
        Comparison2Faces c = GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces();
        jCheckBox2.setSelected(c.isFpScaling());
        primaryColorPanel.setBackground(new Color(c.getPrimaryColor().getRed(), c.getPrimaryColor().getGreen(), c.getPrimaryColor().getBlue()));
        secondaryColorPanel.setBackground(new Color(c.getSecondaryColor().getRed(), c.getSecondaryColor().getGreen(), c.getSecondaryColor().getBlue()));
        setupComparisonMethods(c);
        jSlider3.setValue(c.getFpTreshold());
        switch (c.getUseDatabase()) {
            case 0:
                jCheckBox1.setSelected(false);
                deafultDatabaseRadioButton.setVisible(false);
                chooseDatabaseRadioButton.setVisible(false);
                createDatabaseRadioButton.setVisible(false);
                jTextField1.setVisible(false);
                jButton1.setVisible(false);
                break;
            case 1:
                jCheckBox1.setSelected(true);
                deafultDatabaseRadioButton.setVisible(true);
                chooseDatabaseRadioButton.setVisible(true);
                createDatabaseRadioButton.setVisible(true);
                jTextField1.setVisible(false);
                jButton1.setVisible(false);
                deafultDatabaseRadioButton.setSelected(true);
                break;
            case 2:
                jCheckBox1.setSelected(true);
                deafultDatabaseRadioButton.setVisible(true);
                chooseDatabaseRadioButton.setVisible(true);
                createDatabaseRadioButton.setVisible(true);
                jTextField1.setVisible(true);
                jButton1.setVisible(true);
                chooseDatabaseRadioButton.setSelected(true);
                break;
            case 3:
                jCheckBox1.setSelected(true);
                deafultDatabaseRadioButton.setVisible(true);
                chooseDatabaseRadioButton.setVisible(true);
                createDatabaseRadioButton.setVisible(true);
                jTextField1.setVisible(true);
                jButton1.setVisible(true);
                createDatabaseRadioButton.setSelected(true);
                break;
        }
        setColors();
        processComparisonButton.setEnabled(GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces().isCompareButtonEnabled());

    }

    public void setColors() {
        ComparisonGLEventListener c = GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1();
        Comparison2Faces tc = GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces();
        float[] color = new float[4];
        primaryColorPanel.getBackground().getRGBColorComponents(color);
        color[3] = jCheckBox5.isSelected() ? 1 : jSlider4.getValue() / (float) 100;
        tc.setPrimaryColor(new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB), color, 1));
        c.setPrimaryColor(color);

        float[] color2 = new float[4];
        secondaryColorPanel.getBackground().getRGBColorComponents(color2);
        color2[3] = jCheckBox6.isSelected() ? 1 : jSlider4.getValue() / (float) 100;
        tc.setSecondaryColor(new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB), color2, 1));
        c.setSecondaryColor(color2);

        float[] color3 = new float[4];
        fogColorPanel.getBackground().getRGBColorComponents(color3);

        c.setFogColor(color3);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JRadioButton chooseDatabaseRadioButton;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JRadioButton createDatabaseRadioButton;
    private javax.swing.JRadioButton deafultDatabaseRadioButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel fogColorPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JSlider jSlider4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton noneRadioButton;
    private javax.swing.JPanel primaryColorPanel;
    private javax.swing.JButton processComparisonButton;
    private javax.swing.JPanel secondaryColorPanel;
    private javax.swing.JPanel visualizationPanel;
    // End of variables declaration//GEN-END:variables
}
