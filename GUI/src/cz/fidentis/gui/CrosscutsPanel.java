/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui;

import javax.vecmath.Vector3f;

/**
 *
 * @author xfurman
 */
public class CrosscutsPanel extends javax.swing.JPanel {

    /**
     * Creates new form CrosscutsPanel
     */
    private ViewerPanel viewerPanel;
    
    public CrosscutsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slicesPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        xyRadioButton = new javax.swing.JRadioButton();
        yzRadioButton = new javax.swing.JRadioButton();
        xzRadioButton = new javax.swing.JRadioButton();
        arbitraryRadioButton = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        normalSpinnerX = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        normalSpinnerY = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        normalSpinnerZ = new javax.swing.JSpinner();
        positionSpinnerZ = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        positionSpinnerY = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        positionSpinnerX = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        crosscutSizeSlider = new javax.swing.JSlider();
        highlightCutsCheckBox = new javax.swing.JCheckBox();
        samplingRaysCheckBox = new javax.swing.JCheckBox();
        allCutsCheckBox = new javax.swing.JCheckBox();
        vectorsCheckBox = new javax.swing.JCheckBox();
        showPlaneCheckBox = new javax.swing.JCheckBox();
        densLabel2 = new javax.swing.JLabel();
        densLabel1 = new javax.swing.JLabel();
        thickness = new javax.swing.JSlider();
        colorPanel = new javax.swing.JPanel();
        boxplotCheckBox = new javax.swing.JCheckBox();
        boxplotContinuousCheckBox = new javax.swing.JCheckBox();

        slicesPanel.setName(""); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(xyRadioButton, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.xyRadioButton.text")); // NOI18N
        xyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xyRadioButtonActionPerformed(evt);
            }
        });

        yzRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(yzRadioButton, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.yzRadioButton.text")); // NOI18N
        yzRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yzRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(xzRadioButton, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.xzRadioButton.text")); // NOI18N
        xzRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xzRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(arbitraryRadioButton, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.arbitraryRadioButton.text")); // NOI18N
        arbitraryRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arbitraryRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel9.text")); // NOI18N
        jLabel9.setEnabled(false);

        normalSpinnerX.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        normalSpinnerX.setEnabled(false);
        normalSpinnerX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                normalSpinnerXStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel12.text")); // NOI18N
        jLabel12.setEnabled(false);

        normalSpinnerY.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        normalSpinnerY.setEnabled(false);
        normalSpinnerY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                normalSpinnerYStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel15.text")); // NOI18N
        jLabel15.setEnabled(false);

        normalSpinnerZ.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        normalSpinnerZ.setEnabled(false);
        normalSpinnerZ.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                normalSpinnerZStateChanged(evt);
            }
        });

        positionSpinnerZ.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.5f));
        positionSpinnerZ.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                positionSpinnerZStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel16.text")); // NOI18N

        positionSpinnerY.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.5f));
        positionSpinnerY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                positionSpinnerYStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel17, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel17.text")); // NOI18N

        positionSpinnerX.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.5f));
        positionSpinnerX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                positionSpinnerXStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel18, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel18.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel19, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel19.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel20, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.jLabel20.text")); // NOI18N

        crosscutSizeSlider.setMajorTickSpacing(10);
        crosscutSizeSlider.setMinimum(10);
        crosscutSizeSlider.setMinorTickSpacing(5);
        crosscutSizeSlider.setPaintLabels(true);
        crosscutSizeSlider.setPaintTicks(true);
        crosscutSizeSlider.setToolTipText(org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.crosscutSizeSlider.toolTipText")); // NOI18N
        fpDistanceSlider.setValue(10);
        crosscutSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                crosscutSizeSliderStateChanged(evt);
            }
        });

        highlightCutsCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(highlightCutsCheckBox, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.highlightCutsCheckBox.text")); // NOI18N
        highlightCutsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightCutsCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(samplingRaysCheckBox, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.samplingRaysCheckBox.text")); // NOI18N
        samplingRaysCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samplingRaysCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(allCutsCheckBox, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.allCutsCheckBox.text")); // NOI18N
        allCutsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCutsCheckBoxActionPerformed(evt);
            }
        });

        vectorsCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(vectorsCheckBox, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.vectorsCheckBox.text")); // NOI18N
        vectorsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vectorsCheckBoxActionPerformed(evt);
            }
        });

        showPlaneCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(showPlaneCheckBox, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.showPlaneCheckBox.text")); // NOI18N
        showPlaneCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPlaneCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(densLabel2, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.densLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(densLabel1, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.densLabel1.text")); // NOI18N

        thickness.setMaximum(80);
        thickness.setMinimum(10);
        density.setVisible(false);
        densLabel.setVisible(false);
        thickness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thicknessStateChanged(evt);
            }
        });

        colorPanel.setBackground(new java.awt.Color(255, 255, 255));
        colorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        colorPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        colorPanel.setEnabled(false);
        colorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                colorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout colorPanelLayout = new javax.swing.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(boxplotCheckBox, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.boxplotCheckBox.text")); // NOI18N
        boxplotCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxplotCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(boxplotContinuousCheckBox, org.openide.util.NbBundle.getMessage(CrosscutsPanel.class, "CrosscutsPanel.boxplotContinuousCheckBox.text")); // NOI18N
        boxplotContinuousCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxplotContinuousCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout slicesPanelLayout = new javax.swing.GroupLayout(slicesPanel);
        slicesPanel.setLayout(slicesPanelLayout);
        slicesPanelLayout.setHorizontalGroup(
            slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slicesPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(highlightCutsCheckBox)
                            .addComponent(showPlaneCheckBox))
                        .addGap(23, 23, 23)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vectorsCheckBox)
                            .addComponent(boxplotCheckBox))
                        .addGap(41, 41, 41)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addComponent(allCutsCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(samplingRaysCheckBox))
                            .addComponent(boxplotContinuousCheckBox))
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slicesPanelLayout.createSequentialGroup()
                                            .addComponent(densLabel2)
                                            .addGap(18, 18, 18))
                                        .addGroup(slicesPanelLayout.createSequentialGroup()
                                            .addComponent(densLabel1)
                                            .addGap(33, 33, 33)))
                                    .addGroup(slicesPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(thickness, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                                    .addComponent(colorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(crosscutSizeSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(43, 43, 43)
                                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(slicesPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(positionSpinnerX, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(positionSpinnerY, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(positionSpinnerZ, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(slicesPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(normalSpinnerX, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(normalSpinnerY, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(normalSpinnerZ, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(arbitraryRadioButton)
                                    .addGroup(slicesPanelLayout.createSequentialGroup()
                                        .addComponent(xyRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(yzRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(xzRadioButton)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        slicesPanelLayout.setVerticalGroup(
            slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slicesPanelLayout.createSequentialGroup()
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xyRadioButton)
                    .addComponent(jLabel8)
                    .addComponent(yzRadioButton)
                    .addComponent(xzRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(arbitraryRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(normalSpinnerX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(normalSpinnerY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(normalSpinnerZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(13, 13, 13)
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(positionSpinnerX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(positionSpinnerY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(positionSpinnerZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(22, 22, 22)
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addComponent(crosscutSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(thickness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(densLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(densLabel2)
                            .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(highlightCutsCheckBox)
                            .addComponent(vectorsCheckBox)
                            .addComponent(allCutsCheckBox)
                            .addComponent(samplingRaysCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showPlaneCheckBox)
                            .addComponent(boxplotCheckBox)
                            .addComponent(boxplotContinuousCheckBox)))
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        Hashtable<Integer, JLabel> labels =
        new Hashtable<Integer, JLabel>();
        labels.put(10, new JLabel("1"));
        labels.put(20, new JLabel("2"));
        labels.put(30, new JLabel("3"));
        labels.put(40, new JLabel("4"));
        labels.put(50, new JLabel("5"));
        labels.put(60, new JLabel("6"));
        labels.put(70, new JLabel("7"));
        labels.put(80, new JLabel("8"));
        labels.put(90, new JLabel("9"));
        labels.put(100, new JLabel("10"));
        crosscutSizeSlider.setLabelTable(labels);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slicesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slicesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void xyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xyRadioButtonActionPerformed
        setNormalControlsEnabled(false);
        normalSpinnerX.setValue(0f);
        normalSpinnerY.setValue(0f);
        normalSpinnerZ.setValue(1f);
        viewerPanel.setPlaneNormal(new Vector3f(0f, 0f, 1f), true);
        getContext().getArbitraryPlanePos().x = 0f;
        getContext().getArbitraryPlanePos().y = 0f;
        getContext().getArbitraryPlanePos().z = 1f;
        getContext().setCrossCutPlaneIndex(0);
    }//GEN-LAST:event_xyRadioButtonActionPerformed

    private void yzRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yzRadioButtonActionPerformed
        setNormalControlsEnabled(false);
        normalSpinnerX.setValue(1f);
        normalSpinnerY.setValue(0f);
        normalSpinnerZ.setValue(0f);
        viewerPanel.setPlaneNormal(new Vector3f(1f, 0f, 0f), true);
        getContext().getArbitraryPlanePos().x = 1f;
        getContext().getArbitraryPlanePos().y = 0f;
        getContext().getArbitraryPlanePos().z = 0f;
        getContext().setCrossCutPlaneIndex(1);
    }//GEN-LAST:event_yzRadioButtonActionPerformed

    private void xzRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xzRadioButtonActionPerformed
        setNormalControlsEnabled(false);
        normalSpinnerX.setValue(0f);
        normalSpinnerY.setValue(1f);
        normalSpinnerZ.setValue(0f);
        viewerPanel.setPlaneNormal(new Vector3f(0f, 1f, 0f), true);
        getContext().getArbitraryPlanePos().x = 0f;
        getContext().getArbitraryPlanePos().y = 1f;
        getContext().getArbitraryPlanePos().z = 0f;
        getContext().setCrossCutPlaneIndex(2);
    }//GEN-LAST:event_xzRadioButtonActionPerformed

    private void arbitraryRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arbitraryRadioButtonActionPerformed
        if (arbitraryRadioButton.isSelected()) {
            setNormalControlsEnabled(true);

        }

        BatchComparison c = getContext();
        viewerPanel.setPlaneNormal(c.getArbitraryPlanePos(), true);

        c.setCrossCutPlaneIndex(3);
    }//GEN-LAST:event_arbitraryRadioButtonActionPerformed

    private void normalSpinnerXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_normalSpinnerXStateChanged
        if (normalSpinnerX.isEnabled() && !valuesModified) {
            getContext().setArbitraryPlanePos((float)normalSpinnerX.getValue(), (float) normalSpinnerY.getValue(), (float) normalSpinnerZ.getValue());
            viewerPanel.setPlaneNormal(getContext().getArbitraryPlanePos(), true);
        }
    }//GEN-LAST:event_normalSpinnerXStateChanged

    private void normalSpinnerYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_normalSpinnerYStateChanged
        if (normalSpinnerY.isEnabled() && !valuesModified) {
            getContext().setArbitraryPlanePos((float)normalSpinnerX.getValue(), (float) normalSpinnerY.getValue(), (float) normalSpinnerZ.getValue());
            viewerPanel.setPlaneNormal(getContext().getArbitraryPlanePos(), true);
        }
    }//GEN-LAST:event_normalSpinnerYStateChanged

    private void normalSpinnerZStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_normalSpinnerZStateChanged
        if (normalSpinnerZ.isEnabled() && !valuesModified) {
            getContext().setArbitraryPlanePos((float)normalSpinnerX.getValue(), (float) normalSpinnerY.getValue(), (float) normalSpinnerZ.getValue());
            GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().setPlaneNormal(getContext().getArbitraryPlanePos(), true);
        }
    }//GEN-LAST:event_normalSpinnerZStateChanged

    private void positionSpinnerZStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_positionSpinnerZStateChanged
        if (!valuesModified) {
            getContext().setPlanePosition((float)positionSpinnerX.getValue(), (float) positionSpinnerY.getValue(), (float) positionSpinnerZ.getValue());
            GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().setPlanePoint(getContext().getPlanePosition(), true);
        }
    }//GEN-LAST:event_positionSpinnerZStateChanged

    private void positionSpinnerYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_positionSpinnerYStateChanged
        if (!valuesModified) {
            getContext().setPlanePosition((float)positionSpinnerX.getValue(), (float) positionSpinnerY.getValue(), (float) positionSpinnerZ.getValue());
            GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().setPlanePoint(getContext().getPlanePosition(), true);
        }
    }//GEN-LAST:event_positionSpinnerYStateChanged

    private void positionSpinnerXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_positionSpinnerXStateChanged
        if (!valuesModified) {
            getContext().setPlanePosition((float)positionSpinnerX.getValue(), (float) positionSpinnerY.getValue(), (float) positionSpinnerZ.getValue());
            GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().setPlanePoint(getContext().getPlanePosition(), true);
        }
    }//GEN-LAST:event_positionSpinnerXStateChanged

    private void crosscutSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_crosscutSizeSliderStateChanged
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener2().setVectroScale(crosscutSizeSlider.getValue() / (float) 10);
        getContext().setCrosscutSize(crosscutSizeSlider.getValue());
    }//GEN-LAST:event_crosscutSizeSliderStateChanged

    private void highlightCutsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightCutsCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener().setHighlightCuts(highlightCutsCheckBox.isSelected());
        getContext().setHighlightCuts(highlightCutsCheckBox.isSelected());
    }//GEN-LAST:event_highlightCutsCheckBoxActionPerformed

    private void samplingRaysCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samplingRaysCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener2().setShowSamplingRays(samplingRaysCheckBox.isSelected());
        getContext().setSamplingRays(samplingRaysCheckBox.isSelected());
    }//GEN-LAST:event_samplingRaysCheckBoxActionPerformed

    private void allCutsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allCutsCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener2().setShowAllCuts(allCutsCheckBox.isSelected());
        getContext().setAllCuts(allCutsCheckBox.isSelected());
    }//GEN-LAST:event_allCutsCheckBoxActionPerformed

    private void vectorsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vectorsCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener2().setShowVectors(vectorsCheckBox.isSelected());
        getContext().setShowVectors(vectorsCheckBox.isSelected());
    }//GEN-LAST:event_vectorsCheckBoxActionPerformed

    private void showPlaneCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPlaneCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener().setShowPlane(showPlaneCheckBox.isSelected());
        getContext().setShowPlane(showPlaneCheckBox.isSelected());
    }//GEN-LAST:event_showPlaneCheckBoxActionPerformed

    private void thicknessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thicknessStateChanged
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener2().getInfo().setCutThickness(thickness.getValue() / 10f);
        getContext().setCrosscutThickness(thickness.getValue());
    }//GEN-LAST:event_thicknessStateChanged

    private void colorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelMouseClicked
        activeColorPanel = colorPanel;
        jColorChooser1.setColor(colorPanel.getBackground());
        colorDialog.setVisible(true);
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener2().getInfo().setColorOfCut(colorPanel.getBackground().getRGBColorComponents(new float[3]));
        getContext().setCrosscutColor(colorPanel.getBackground());
    }//GEN-LAST:event_colorPanelMouseClicked

    private void boxplotCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxplotCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener2().getInfo().setShowBoxplot(boxplotCheckBox.isSelected());
        getContext().setShowBoxplot(boxplotCheckBox.isSelected());
    }//GEN-LAST:event_boxplotCheckBoxActionPerformed

    private void boxplotContinuousCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxplotContinuousCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener2().getInfo().setShowBoxplotFunction(boxplotContinuousCheckBox.isSelected());
        getContext().setShowBoxplotFunction(boxplotContinuousCheckBox.isSelected());
    }//GEN-LAST:event_boxplotContinuousCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allCutsCheckBox;
    private javax.swing.JRadioButton arbitraryRadioButton;
    private javax.swing.JCheckBox boxplotCheckBox;
    private javax.swing.JCheckBox boxplotContinuousCheckBox;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JSlider crosscutSizeSlider;
    private javax.swing.JLabel densLabel1;
    private javax.swing.JLabel densLabel2;
    private javax.swing.JCheckBox highlightCutsCheckBox;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner normalSpinnerX;
    private javax.swing.JSpinner normalSpinnerY;
    private javax.swing.JSpinner normalSpinnerZ;
    private javax.swing.JSpinner positionSpinnerX;
    private javax.swing.JSpinner positionSpinnerY;
    private javax.swing.JSpinner positionSpinnerZ;
    private javax.swing.JCheckBox samplingRaysCheckBox;
    private javax.swing.JCheckBox showPlaneCheckBox;
    private javax.swing.JPanel slicesPanel;
    private javax.swing.JSlider thickness;
    private javax.swing.JCheckBox vectorsCheckBox;
    private javax.swing.JRadioButton xyRadioButton;
    private javax.swing.JRadioButton xzRadioButton;
    private javax.swing.JRadioButton yzRadioButton;
    // End of variables declaration//GEN-END:variables
}
