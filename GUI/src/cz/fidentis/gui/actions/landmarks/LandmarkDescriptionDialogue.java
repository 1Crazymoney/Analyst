/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.actions.landmarks;

import cz.fidentis.featurepoints.FpTexter;
import cz.fidentis.featurepoints.TableData;
import cz.fidentis.utils.DialogUtils;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/**
 *
 * @author xferkova
 */
public class LandmarkDescriptionDialogue extends javax.swing.JPanel {
    
    /**
     * Creates new form LandmarkDescriptionDialogue
     */
    public LandmarkDescriptionDialogue() {
        initComponents();
        setConfiguration();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        landmarkTable = new javax.swing.JTable();
        applyButton = new javax.swing.JButton();
        removeLandmarkButton = new javax.swing.JButton();
        editLandmarkButton = new javax.swing.JButton();
        addLandmarkButton = new javax.swing.JButton();
        loadDefaultDescriptionButton = new javax.swing.JButton();
        exportLandmarkDescriptionButton = new javax.swing.JButton();
        loadLandmarkDescriptionButton = new javax.swing.JButton();

        landmarkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        landmarkTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(landmarkTable);
        if (landmarkTable.getColumnModel().getColumnCount() > 0) {
            landmarkTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.landmarkTable.columnModel.title0")); // NOI18N
            landmarkTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.landmarkTable.columnModel.title1")); // NOI18N
            landmarkTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.landmarkTable.columnModel.title2")); // NOI18N
            landmarkTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.landmarkTable.columnModel.title3")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(applyButton, org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.applyButton.text")); // NOI18N
        applyButton.setEnabled(false);
        applyButton.setMaximumSize(new java.awt.Dimension(71, 23));
        applyButton.setMinimumSize(new java.awt.Dimension(71, 23));
        applyButton.setPreferredSize(new java.awt.Dimension(71, 23));
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeLandmarkButton, org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.removeLandmarkButton.text")); // NOI18N
        removeLandmarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLandmarkButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(editLandmarkButton, org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.editLandmarkButton.text")); // NOI18N
        editLandmarkButton.setMaximumSize(new java.awt.Dimension(71, 23));
        editLandmarkButton.setMinimumSize(new java.awt.Dimension(71, 23));
        editLandmarkButton.setPreferredSize(new java.awt.Dimension(71, 23));
        editLandmarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLandmarkButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addLandmarkButton, org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.addLandmarkButton.text")); // NOI18N
        addLandmarkButton.setMaximumSize(new java.awt.Dimension(71, 23));
        addLandmarkButton.setMinimumSize(new java.awt.Dimension(71, 23));
        addLandmarkButton.setPreferredSize(new java.awt.Dimension(71, 23));
        addLandmarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLandmarkButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(loadDefaultDescriptionButton, org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.loadDefaultDescriptionButton.text")); // NOI18N
        loadDefaultDescriptionButton.setMaximumSize(new java.awt.Dimension(71, 23));
        loadDefaultDescriptionButton.setMinimumSize(new java.awt.Dimension(71, 23));
        loadDefaultDescriptionButton.setPreferredSize(new java.awt.Dimension(71, 23));
        loadDefaultDescriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDefaultDescriptionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportLandmarkDescriptionButton, org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.exportLandmarkDescriptionButton.text")); // NOI18N
        exportLandmarkDescriptionButton.setMaximumSize(new java.awt.Dimension(71, 23));
        exportLandmarkDescriptionButton.setMinimumSize(new java.awt.Dimension(71, 23));
        exportLandmarkDescriptionButton.setPreferredSize(new java.awt.Dimension(71, 23));
        exportLandmarkDescriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLandmarkDescriptionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(loadLandmarkDescriptionButton, org.openide.util.NbBundle.getMessage(LandmarkDescriptionDialogue.class, "LandmarkDescriptionDialogue.loadLandmarkDescriptionButton.text")); // NOI18N
        loadLandmarkDescriptionButton.setMaximumSize(new java.awt.Dimension(71, 23));
        loadLandmarkDescriptionButton.setMinimumSize(new java.awt.Dimension(71, 23));
        loadLandmarkDescriptionButton.setPreferredSize(new java.awt.Dimension(71, 23));
        loadLandmarkDescriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadLandmarkDescriptionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(loadDefaultDescriptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportLandmarkDescriptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadLandmarkDescriptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addLandmarkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editLandmarkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeLandmarkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeLandmarkButton)
                    .addComponent(editLandmarkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addLandmarkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadDefaultDescriptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportLandmarkDescriptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadLandmarkDescriptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editLandmarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLandmarkButtonActionPerformed
       int row = landmarkTable.getSelectedRow();
       
       if(row < 0)  //nothing selected
           return;
       
       int id = Integer.parseInt(landmarkTable.getModel().getValueAt(row, 0).toString());
        
       AddEditLandmarkDialogue d = new AddEditLandmarkDialogue(id, 
                landmarkTable.getModel().getValueAt(row, 1).toString(),
                landmarkTable.getModel().getValueAt(row, 2).toString(), true, this);
        d.setVisible(true);
    }//GEN-LAST:event_editLandmarkButtonActionPerformed

    private void removeLandmarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLandmarkButtonActionPerformed
     int row = landmarkTable.getSelectedRow();
     
     if(row < 0)    //nothing selected
         return;
     
     int id = Integer.parseInt(landmarkTable.getModel().getValueAt(row, 0).toString());
     boolean success = FpTexter.getInstance().removeLandmark(this, id);
     
     if(success){ //refresh
       fillTable();
       setApplyButton(true);
     }
             
    }//GEN-LAST:event_removeLandmarkButtonActionPerformed

    private void addLandmarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLandmarkButtonActionPerformed
      AddEditLandmarkDialogue d = new AddEditLandmarkDialogue(-1, "", "", false, this);
      d.setVisible(true);
    }//GEN-LAST:event_addLandmarkButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
       boolean result = FpTexter.getInstance().saveLandmarks();
       
       //check if save was successful
       if(result)
         setApplyButton(false);
       else
            errorSavingDescDialog();
       
    }//GEN-LAST:event_applyButtonActionPerformed

    private void loadDefaultDescriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDefaultDescriptionButtonActionPerformed
        //This doesn't save landmarks to disk!
        boolean result = FpTexter.getInstance().loadDefaultText();
        if(!result){
            errorLoadingDescDialog();
        }else{
            fillTable();
            setApplyButton(true);
        }
        
        
    }//GEN-LAST:event_loadDefaultDescriptionButtonActionPerformed

    private void exportLandmarkDescriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLandmarkDescriptionButtonActionPerformed
        // If new added landmarks were not saved yet
        if(applyButton.isEnabled()){
            int result = DialogUtils.instance().createMessageDialog(new String[]{"Yes", "No"},
                                                1, this, 
                                                "Changes to landmark description were not saved. Do you want to save before exporting?", 
                                                "Unsaved changes.", JOptionPane.INFORMATION_MESSAGE);
            //save changes
            if(result == 0)
                applyButtonActionPerformed(null);
        }
           
        
        
        String filePath = DialogUtils.instance().openDialogueSaveFile(this, "CSV Files", new String[] {"csv"}, false);
        
        //Dialog canceled
        if(filePath == null)
            return;
        
        if(!filePath.endsWith(".csv"))
            filePath += ".csv";
        
        boolean result = FpTexter.getInstance().exportLandmarks(filePath);
        
        if(!result)
            errorSavingDescDialog();
           
    }//GEN-LAST:event_exportLandmarkDescriptionButtonActionPerformed

    private void loadLandmarkDescriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadLandmarkDescriptionButtonActionPerformed
        File[] filePath = DialogUtils.instance().openDialogueLoadFiles(this, "CSV Files", new String[] {"csv"}, false);
        
        //Dialog canceled
        if(filePath == null)
            return;
        
        FpTexter.getInstance().importLandmarkDescription(filePath[0].getAbsolutePath());
        fillTable();
        setApplyButton(true);
    }//GEN-LAST:event_loadLandmarkDescriptionButtonActionPerformed

    protected void fillTable(){
        TableData values = FpTexter.getInstance().landmarkDescription();

            landmarkTable.setModel(new javax.swing.table.DefaultTableModel(
                    values.getTableData(),
                    values.getHeader()
            ));
            
        TableColumn col = landmarkTable.getColumnModel().getColumn(0);
        col.setPreferredWidth(30);
        col.setMaxWidth(30);
        col.setMinWidth(30);
        
        col = landmarkTable.getColumnModel().getColumn(1);
        col.setPreferredWidth(150);
        col.setMaxWidth(150);
        col.setMinWidth(150);
        
        landmarkTable.getColumnModel().getColumn(2).setPreferredWidth(500);
    }
    
    private void setConfiguration(){
        //get latest saved landmark description
        boolean result = FpTexter.getInstance().loadCurrentLandmarkDescription();
        
        if(!result)
            errorLoadingDescDialog();
        else
            fillTable();    
    }
    
    protected void setApplyButton(boolean enabled){
        applyButton.setEnabled(enabled);
    }
    
    private void errorLoadingDescDialog(){
        DialogUtils.instance().createMessageDialog(new String[]{"OK"}, 0, this, "Error loading landmark description.", "Loading failed.", JOptionPane.ERROR_MESSAGE);
    }
    
    private void errorSavingDescDialog(){
        DialogUtils.instance().createMessageDialog(new String[]{"OK"}, 0, this, "Error saving landmark description.", "Saving failed.", JOptionPane.ERROR_MESSAGE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLandmarkButton;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton editLandmarkButton;
    private javax.swing.JButton exportLandmarkDescriptionButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable landmarkTable;
    private javax.swing.JButton loadDefaultDescriptionButton;
    private javax.swing.JButton loadLandmarkDescriptionButton;
    private javax.swing.JButton removeLandmarkButton;
    // End of variables declaration//GEN-END:variables
}
