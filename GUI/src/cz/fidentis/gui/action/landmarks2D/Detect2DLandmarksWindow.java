/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.action.landmarks2D;

import cz.fidentis.featurepoints.FpModel;
import cz.fidentis.processing.exportProcessing.FPImportExport;
import cz.fidentis.processing.featurePoints.TextureLandmarks;
import cz.fidentis.utils.DialogUtils;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.openide.util.Exceptions;

/**
 *
 * @author xferkova
 */
public class Detect2DLandmarksWindow extends javax.swing.JPanel {
    private Detect2DLandmarksData data;
    
    
    /**
     * Creates new form Detect2DLandmarksWindow
     */
    public Detect2DLandmarksWindow() {
        initComponents();
        data = new Detect2DLandmarksData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        loadedFileText = new javax.swing.JTextField();
        detectLandmarksButton = new javax.swing.JButton();
        exportLandmarksButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        detectFaceCheckbox = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(500, 200));
        setPreferredSize(new java.awt.Dimension(500, 200));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Detect2DLandmarksWindow.class, "Detect2DLandmarksWindow.jLabel1.text")); // NOI18N

        loadedFileText.setEditable(false);
        loadedFileText.setText(org.openide.util.NbBundle.getMessage(Detect2DLandmarksWindow.class, "Detect2DLandmarksWindow.loadedFileText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(detectLandmarksButton, org.openide.util.NbBundle.getMessage(Detect2DLandmarksWindow.class, "Detect2DLandmarksWindow.detectLandmarksButton.text")); // NOI18N
        detectLandmarksButton.setEnabled(false);
        detectLandmarksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectLandmarksButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportLandmarksButton, org.openide.util.NbBundle.getMessage(Detect2DLandmarksWindow.class, "Detect2DLandmarksWindow.exportLandmarksButton.text")); // NOI18N
        exportLandmarksButton.setEnabled(false);
        exportLandmarksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLandmarksButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(Detect2DLandmarksWindow.class, "Detect2DLandmarksWindow.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        detectFaceCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(detectFaceCheckbox, org.openide.util.NbBundle.getMessage(Detect2DLandmarksWindow.class, "Detect2DLandmarksWindow.detectFaceCheckbox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(detectLandmarksButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                        .addComponent(exportLandmarksButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadedFileText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detectFaceCheckbox)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadedFileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detectFaceCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(detectLandmarksButton)
                    .addComponent(exportLandmarksButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        File[] loadedFiles = DialogUtils.instance().openDialogueLoadFiles(this, "Image files", new String[] {"png", "jpg", "jpeg"}, true);
        
        if(loadedFiles != null && loadedFiles.length > 0)
        {
            StringBuilder loadedFilesTxt = new StringBuilder();
            for(File f : loadedFiles){
                loadedFilesTxt.append(f.getName()).append(";");
            }
            
            loadedFileText.setText(loadedFilesTxt.toString());
            detectLandmarksButton.setEnabled(true);
        } else {
            detectLandmarksButton.setEnabled(false);
            loadedFileText.setText("...");
        }
        
        exportLandmarksButton.setEnabled(false);
        data.setLoadedFiles(loadedFiles);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void detectLandmarksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectLandmarksButtonActionPerformed
       File[] loadedFiles = data.getLoadedFiles();
       
       if(loadedFiles.length > 0){
           try {
               List<File> loadedList = new ArrayList<>();
               for(File f: loadedFiles){
                   loadedList.add(f);
               }
               String tmpDir = TextureLandmarks.instance().detectTextureLandmarks(loadedList, detectFaceCheckbox.isEnabled(), true);
               List<FpModel> detectedLandmarks = TextureLandmarks.instance().get2DLandmarks(loadedList, new File(tmpDir), loadedFiles.length);
               
               data.setDetectedLandmarks(detectedLandmarks);
               
               if(detectedLandmarks.size() > 0){
                   exportLandmarksButton.setEnabled(true);
               } else {
                   exportLandmarksButton.setEnabled(false);
               }
           } catch (IOException ex) {
               Exceptions.printStackTrace(ex);
           }
       } else {
           JOptionPane.showMessageDialog(this, 
                   "No loaded images detected. Detection will not be performed.", "No images loaded", JOptionPane.OK_OPTION);
       }
    }//GEN-LAST:event_detectLandmarksButtonActionPerformed

    private void exportLandmarksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLandmarksButtonActionPerformed
        FPImportExport.instance().exportPoints(this, data.getDetectedLandmarks());
    }//GEN-LAST:event_exportLandmarksButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox detectFaceCheckbox;
    private javax.swing.JButton detectLandmarksButton;
    private javax.swing.JButton exportLandmarksButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField loadedFileText;
    // End of variables declaration//GEN-END:variables
}
